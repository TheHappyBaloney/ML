{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3468346,"sourceType":"datasetVersion","datasetId":2088120}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Package Import","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\nprint(\"Import Successful!\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-12T07:06:51.076783Z","iopub.execute_input":"2024-05-12T07:06:51.077136Z","iopub.status.idle":"2024-05-12T07:06:55.873402Z","shell.execute_reply.started":"2024-05-12T07:06:51.077110Z","shell.execute_reply":"2024-05-12T07:06:55.872348Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Import Successful!\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Data Preprocessing","metadata":{}},{"cell_type":"code","source":"dataset = pd.read_csv(\"/kaggle/input/smart-agricultural-production-optimizing-engine/Crop_recommendation.csv\")\nprint(dataset.head())\n# Check for missing values in each column\nmissing_values = dataset.isnull().sum()\n# Print the number of missing values in each column\nprint(\"Missing values in each column:\")\nprint(missing_values)\n# Alternatively, you can check for missing values in the entire dataset\ntotal_missing = dataset.isnull().sum().sum()\nprint(\"\\nTotal missing values in the dataset:\", total_missing)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T06:49:55.793232Z","iopub.execute_input":"2024-05-12T06:49:55.793644Z","iopub.status.idle":"2024-05-12T06:49:55.822903Z","shell.execute_reply.started":"2024-05-12T06:49:55.793615Z","shell.execute_reply":"2024-05-12T06:49:55.821793Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"    N   P   K  temperature   humidity        ph    rainfall label\n0  90  42  43    20.879744  82.002744  6.502985  202.935536  rice\n1  85  58  41    21.770462  80.319644  7.038096  226.655537  rice\n2  60  55  44    23.004459  82.320763  7.840207  263.964248  rice\n3  74  35  40    26.491096  80.158363  6.980401  242.864034  rice\n4  78  42  42    20.130175  81.604873  7.628473  262.717340  rice\nMissing values in each column:\nN              0\nP              0\nK              0\ntemperature    0\nhumidity       0\nph             0\nrainfall       0\nlabel          0\ndtype: int64\n\nTotal missing values in the dataset: 0\n","output_type":"stream"}]},{"cell_type":"code","source":"# Perform one-hot encoding for the 'label' column\nencoded_dataset = pd.get_dummies(dataset, columns=['label'])\nprint(encoded_dataset.head())","metadata":{"execution":{"iopub.status.busy":"2024-05-12T06:51:17.516231Z","iopub.execute_input":"2024-05-12T06:51:17.516619Z","iopub.status.idle":"2024-05-12T06:51:17.543821Z","shell.execute_reply.started":"2024-05-12T06:51:17.516591Z","shell.execute_reply":"2024-05-12T06:51:17.542951Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"    N   P   K  temperature   humidity        ph    rainfall  label_apple  \\\n0  90  42  43    20.879744  82.002744  6.502985  202.935536        False   \n1  85  58  41    21.770462  80.319644  7.038096  226.655537        False   \n2  60  55  44    23.004459  82.320763  7.840207  263.964248        False   \n3  74  35  40    26.491096  80.158363  6.980401  242.864034        False   \n4  78  42  42    20.130175  81.604873  7.628473  262.717340        False   \n\n   label_banana  label_blackgram  ...  label_mango  label_mothbeans  \\\n0         False            False  ...        False            False   \n1         False            False  ...        False            False   \n2         False            False  ...        False            False   \n3         False            False  ...        False            False   \n4         False            False  ...        False            False   \n\n   label_mungbean  label_muskmelon  label_orange  label_papaya  \\\n0           False            False         False         False   \n1           False            False         False         False   \n2           False            False         False         False   \n3           False            False         False         False   \n4           False            False         False         False   \n\n   label_pigeonpeas  label_pomegranate  label_rice  label_watermelon  \n0             False              False        True             False  \n1             False              False        True             False  \n2             False              False        True             False  \n3             False              False        True             False  \n4             False              False        True             False  \n\n[5 rows x 29 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(encoded_dataset.columns)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T06:54:03.163135Z","iopub.execute_input":"2024-05-12T06:54:03.163528Z","iopub.status.idle":"2024-05-12T06:54:03.169574Z","shell.execute_reply.started":"2024-05-12T06:54:03.163500Z","shell.execute_reply":"2024-05-12T06:54:03.168417Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Index(['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall',\n       'label_apple', 'label_banana', 'label_blackgram', 'label_chickpea',\n       'label_coconut', 'label_coffee', 'label_cotton', 'label_grapes',\n       'label_jute', 'label_kidneybeans', 'label_lentil', 'label_maize',\n       'label_mango', 'label_mothbeans', 'label_mungbean', 'label_muskmelon',\n       'label_orange', 'label_papaya', 'label_pigeonpeas', 'label_pomegranate',\n       'label_rice', 'label_watermelon'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"y = encoded_dataset.drop(columns=['label_apple', 'label_banana', 'label_blackgram', 'label_chickpea',\n       'label_coconut', 'label_coffee', 'label_cotton', 'label_grapes',\n       'label_jute', 'label_kidneybeans', 'label_lentil', 'label_maize',\n       'label_mango', 'label_mothbeans', 'label_mungbean', 'label_muskmelon',\n       'label_orange', 'label_papaya', 'label_pigeonpeas', 'label_pomegranate',\n       'label_rice', 'label_watermelon'])\nx = encoded_dataset.drop(columns=['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall'])\n\nscaler = StandardScaler()\nx_scaled = scaler.fit_transform(x)\n\nx_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.3, random_state=42)\n\nprint(\"Training set shape:\", x_train.shape, y_train.shape)\nprint(\"Testing set shape:\", x_test.shape, y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-12T06:59:58.377281Z","iopub.execute_input":"2024-05-12T06:59:58.377671Z","iopub.status.idle":"2024-05-12T06:59:58.393826Z","shell.execute_reply.started":"2024-05-12T06:59:58.377644Z","shell.execute_reply":"2024-05-12T06:59:58.392648Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Training set shape: (1540, 22) (1540, 7)\nTesting set shape: (660, 22) (660, 7)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model Building","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}